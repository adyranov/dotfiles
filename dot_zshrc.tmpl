# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# =============================================================================
#                                   Exports
# =============================================================================

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export TERM="xterm-256color"
export EDITOR=nano

{{ if eq .chezmoi.os "linux" -}}
{{ if (contains "microsoft" .chezmoi.kernel.osrelease) }}
# WSL-specific code
export LIBGL_ALWAYS_INDIRECT="1"
export BROWSER='/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'
{{ end }}
{{ end -}}

export PATH="${PATH}:$HOME/bin:${HOME}/.krew/bin"

export FZF_CTRL_T_COMMAND="fd --hidden --follow --exclude ".git""
export FZF_DEFAULT_COMMAND="${FZF_CTRL_T_COMMAND} --type f"
export FZF_ALT_C_COMMAND="${FZF_CTRL_T_COMMAND} --type d ."
export FZF_DEFAULT_OPTS="--prompt='» ' --pointer='▶' --marker='✓ ' --reverse --tabstop 2 --multi --color=bg+:-1,marker:010 --bind '?:toggle-preview'"
export FZF_ALT_C_OPTS="--preview '(exa --color=always --tree --group-directories-first {} || tree -C {}) 2> /dev/null'"

# =============================================================================
#                                   Options
# =============================================================================

# Key timeout and character sequences
KEYTIMEOUT=1

# =============================================================================
#                                   Theme
# =============================================================================

ZSH_THEME="powerlevel10k/powerlevel10k"
POWERLEVEL9K_MODE="nerdfont-complete"
POWERLEVEL9K_INSTANT_PROMPT="quiet"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir dir_writable vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status kubecontext time)
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_KUBECONTEXT_BACKGROUND="blue"
POWERLEVEL9K_KUBECONTEXT_FOREGROUND="gray"
POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|kubens|kubectx|oc|helm'
POWERLEVEL9K_TIME_FORMAT="%D{%H:%M}"


# =============================================================================
#                                   Zinit
# =============================================================================

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▒ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone --depth 1 https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▒ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▒ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)

zinit light-mode depth=1 for \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-bin-gem-node \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-readurl \
    zinit-zsh/z-a-rust

### End of Zinit's installer chunk

## Load synchronously
zinit lucid light-mode depth=1 for \
    OMZL::completion.zsh \
    OMZL::directories.zsh \
    OMZL::git.zsh \
    OMZL::history.zsh \
    OMZL::key-bindings.zsh \
    OMZL::theme-and-appearance.zsh \
    \
    romkatv/powerlevel10k \
    @asdf-vm/asdf \
    has'npm' \
        lukechilds/zsh-better-npm-completion \
    has'helm' \
        OMZP::helm \
    has'kubectl' \
        OMZP::kubectl \

# zinit essential
zinit wait lucid light-mode depth=1 for \
    atinit"zicompinit; zicdreplay" \
        zdharma/fast-syntax-highlighting \
    atload"_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions \
    blockf atpull'zinit creinstall -q .' \
        zsh-users/zsh-completions \
    atload"
        bindkey '^[[A' history-substring-search-up
        bindkey '^[[B' history-substring-search-down
    " \
        zsh-users/zsh-history-substring-search


## Load asynchronously
zinit wait lucid light-mode depth=1 for \
    OMZL::clipboard.zsh \
    svn OMZP::colored-man-pages \
    OMZP::command-not-found \
    OMZP::encode64 \
    svn OMZP::extract \
    has'fasd' \
        OMZP::fasd \
    as'completion' OMZP::fd/_fd \
    atload"unalias grv" \
        OMZP::git \
    OMZP::sudo \
    OMZP::urltools \
    OMZP::zsh_reload \
    has'terraform' \
        svn OMZP::terraform \
    Aloxaf/fzf-tab \
    MichaelAquilina/zsh-you-should-use \
    \
    has'kubectl' \
    pick='/dev/null' sbin='kubectx' sbin='kubens' \
    atclone='ln -sf completion/kubectx.zsh _kubectx; ln -sf completion/kubens.zsh _kubens' \
    atpull='%atclone' \
        ahmetb/kubectx \

# fzf
zinit pack"bgn-binary+keys" git for fzf
# ls_colors
zinit pack for ls_colors

# direnv
zinit from"gh-r" as"program" mv"direnv* -> direnv" \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    pick"direnv" src="zhook.zsh" for \
        direnv/direnv

# cheat.sh and its completions
zinit wait lucid for \
    as"null" sbin"*cht.sh -> cht.sh" \
        https://cht.sh/:cht.sh \
    as"completion" mv=":zsh -> _cht" \
        https://cht.sh/:zsh

# custom apps
zinit wait lucid from"gh-r" as"null" for \
  sbin"**/fd"        @sharkdp/fd \
  sbin"**/bat"       @sharkdp/bat \
  sbin"**/rg"        BurntSushi/ripgrep \
  sbin"*/delta"      dandavison/delta \
  sbin"exa* -> exa"  ogham/exa

# custom completions
zinit wait lucid light-mode depth=1 as"null" for \
    as'completion' mv'chezmoi* -> _chezmoi' \
        https://github.com/twpayne/chezmoi/blob/master/completions/chezmoi.zsh \
    has'vault' id-as'vault-completion' atinit'complete -o nospace -C vault vault' \
        zdharma/null \
    has'oc' id-as'oc-completion' atinit'source <(oc completion zsh)' \
        zdharma/null \
    has'az' id-as'azure-cli-completion' atinit'
        [[ -s "/etc/bash_completion.d/azure-cli" ]] && source "/etc/bash_completion.d/azure-cli"
        [[ -s "/usr/local/etc/bash_completion.d/az" ]] && source "/usr/local/etc/bash_completion.d/az"
    ' \
        zdharma/null

# =============================================================================
#                                   Style
# =============================================================================

zstyle ':completion:complete:*:options' sort false
zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ":fzf-tab:complete:(exa|bat|nano|vim|nvim):*" fzf-preview '
bat --style=numbers --color=always --line-range :250 $realpath 2>/dev/null ||
exa -1 --color=always --icons --group-directories-first $realpath
'
zstyle ':fzf-tab:complete:kill:argument-rest' fzf-preview 'ps --pid=$word -o cmd --no-headers -w -w'
zstyle ':fzf-tab:complete:kill:argument-rest' fzf-flags '--preview-window=down:3:wrap'

# =============================================================================
#                                   Aliases
# =============================================================================

alias kctx=kubectx
alias kns=kubens

# ls => exa
# exchange ls with exa
# https://the.exa.website/
if (( $+commands[exa] )); then
  alias ls='exa'
fi

# cat/less/man => bat

# exchange cat/less with bat
# https://github.com/sharkdp/bat
if (( $+commands[bat] )); then
  alias cat='bat -pp'
  alias less='bat --paging=always'

  # override MANPAGER
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"

fi

# grep => ripgrep

# exchange grep with ripgrep
# https://github.com/BurntSushi/ripgrep
if (( $+commands[rg] )); then
  alias grep='rg'
fi

# top => htop

# exchange top with htop
# https://github.com/htop-dev/htop
if (( $+commands[htop] )); then
  alias top='htop'
fi

# vim => neovim

# exchange vim with neovim
# https://github.com/neovim/neovim
if (( $+commands[vim] )); then
  alias vim='nvim'
fi

# =============================================================================
#                                   Local
# =============================================================================

[[ -f ${HOME}/.zshrc.local ]] && source ${HOME}/.zshrc.local

true
