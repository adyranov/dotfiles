{{- /* -------------------- Basic User / Environment -------------------- */ -}}
{{- $personalUsername := "adyranov" -}}
{{- $personalName := "" -}}
{{- $personalEmail := "" -}}
{{- $restricted := false -}}
{{- $work := false -}}
{{- $gpg := dict "sign" "" "encrypt" "" -}}
{{- $secrets := dict "age" stdinIsATTY "bitwarden" false -}}
{{- $toolchains := list "cloud" "docker" "golang" "iac" "java" "kubernetes" "node" "python" "rust" "extra" -}}

{{- $data := . -}}
{{- range $k := list "personal" "gpg" "host" "toolchains" -}}
  {{- $_ := set $data $k (default (dict) (get $data $k)) -}}
{{- end -}}

{{- /* -------------------- Ephemeral Environment -------------------- */ -}}
{{- $ephemeral := false -}}
{{- $ephemeralReasons := list -}}

{{- if stat "/.dockerenv" -}}
  {{- $ephemeral = true -}}
  {{- $ephemeralReasons = append $ephemeralReasons "Detected /.dockerenv" -}}
{{- end -}}
{{- if stat "/run/.containerenv" -}}
  {{- $ephemeral = true -}}
  {{- $ephemeralReasons = append $ephemeralReasons "Detected /run/.containerenv" -}}
{{- end -}}

{{- if stat "/proc/1/cgroup" -}}
  {{- $cgroup := output "cat" "/proc/1/cgroup" -}}
  {{- $match := regexFind "(docker|lxc|podman|kubepods|containerd)" $cgroup -}}
  {{- if $match -}}
    {{- $ephemeral = true -}}
    {{- $ephemeralReasons = append $ephemeralReasons (printf "/proc/1/cgroup matched %s" $match) -}}
  {{- end -}}
{{- end -}}

{{- if stat "/proc/1/mountinfo" -}}
  {{- $mountinfo := output "cat" "/proc/1/mountinfo" -}}
  {{- $match := regexFind "(overlay|containers)" $mountinfo -}}
  {{- if $match -}}
    {{- $ephemeral = true -}}
    {{- $ephemeralReasons = append $ephemeralReasons (printf "/proc/1/mountinfo matched %s" $match) -}}
  {{- end -}}
{{- end -}}

{{- $isWSL := or (env "WSL_DISTRO_NAME") (env "WSL_INTEROP") (and (eq .chezmoi.os "linux") (contains (lower (output "uname" "-r")) "microsoft")) -}}
{{- if and $ephemeral $isWSL -}}
  {{- $ephemeral = false -}}
  {{- $ephemeralReasons = list -}}
{{- end -}}

{{- if $ephemeral -}}
  {{- writeToStdout "üõ≥Ô∏è Running in a containerized (ephemeral) environment.\n" -}}
  {{- range $reason := $ephemeralReasons -}}
    {{- writeToStdout (printf "   ‚Ä¢ %s\n" $reason) -}}
  {{- end -}}
{{- end -}}

{{- /* -------------------- OS / Distro -------------------- */ -}}
{{- $distro := dict "family" .chezmoi.os "id" (get .chezmoi.osRelease "id" | default .chezmoi.os) -}}
{{- if or (eq $distro.id "arch") (eq $distro.id "archarm") -}}{{- $_ := set $distro "id" "archlinux" -}}{{- end -}}
{{- $supported := list "darwin" "ubuntu" "archlinux" "fedora" -}}
{{- $isSupported := false -}}
{{- range $supported -}}{{- if eq . $distro.id -}}{{- $isSupported = true -}}{{- end -}}{{- end -}}
{{- if not $isSupported -}}
  {{- writeToStdout (printf "‚ö†Ô∏è Unsupported distribution: %s\n" $distro.id) -}}
  {{- exit 1 -}}
{{- end -}}

{{- /* -------------------- Brew Path -------------------- */ -}}
{{- $brewPath := "" -}}
{{- if eq .chezmoi.os "darwin" -}}
  {{- $brewPath = "/usr/local/bin/brew" -}}
  {{- if eq .chezmoi.arch "arm64" -}}
    {{- $brewPath = "/opt/homebrew/bin/brew" -}}
  {{- end -}}
{{- else -}}
  {{- $brewPath = "/home/linuxbrew/.linuxbrew/bin/brew" -}}
{{- end -}}

{{- /* -------------------- Chassis / Host Type -------------------- */ -}}
{{- $chassisType := "desktop" -}}
{{- if $ephemeral -}}
  {{- $chassisType = "ephemeral" -}}
{{- else if eq .chezmoi.os "linux" -}}
  {{- if $isWSL -}}
    {{- $chassisType = "wsl" -}}
  {{- else -}}
    {{- $hostnamectl := output "hostnamectl" "--json=short" -}}
    {{- $parsed := mustFromJson $hostnamectl -}}
    {{- $chassis := $parsed.Chassis | default "desktop" -}}
    {{- $chassisType = $chassis -}}
  {{- end -}}
{{- else if eq .chezmoi.os "darwin" -}}
  {{- $hwModel := output "sysctl" "-n" "hw.model" -}}
  {{- if contains "MacBook" $hwModel -}}
    {{- $chassisType = "laptop" -}}
  {{- else -}}
    {{- $chassisType = "desktop" -}}
  {{- end -}}
{{- else if eq .chezmoi.os "windows" -}}
  {{- $psCmd := "if (Get-WmiObject -Class win32_battery) { 'laptop' } elseif ((Get-WmiObject -Class Win32_SystemEnclosure).ChassisTypes -contains 8) { 'laptop' } else { 'desktop' }" -}}
  {{- $chassisType = output "powershell.exe" "-noprofile" "-command" $psCmd -}}
{{- end -}}

{{- /* -------------------- Toolchain Defaults -------------------- */ -}}
{{- $toolchainsEnabled := dict -}}
{{- $toolchainsSelected := list -}}
{{- range $t := $toolchains -}}
  {{- $with := (or (eq (env (printf "WITH_%s" (upper $t)) | lower) "1")
                   (eq (env (printf "WITH_%s" (upper $t)) | lower) "true")) -}}

  {{- $withoutAll := (or (eq (env "WITHOUT_TOOLCHAINS" | lower) "1")
                         (eq (env "WITHOUT_TOOLCHAINS" | lower) "true")) -}}

  {{- $without := (or (eq (env (printf "WITHOUT_%s" (upper $t)) | lower) "1")
                      (eq (env (printf "WITHOUT_%s" (upper $t)) | lower) "true")) -}}

  {{- $_ := set $toolchainsEnabled $t (or $with (and (not (or $withoutAll $without)) true)) -}}
{{- end -}}

{{- /* -------------------- Interactive Prompts -------------------- */ -}}
{{- $interactive := true -}}
{{- if stdinIsATTY -}}
  {{- $work = promptBoolOnce $data.host "work" "üè¢ Work Environment" $work -}}
  {{- $restricted = promptBoolOnce $data.host "restricted" "üîí Restricted Environment" $restricted -}}
  {{- $personalUsername = promptStringOnce $data.personal "username" "üë§ Personal Git Username" $personalUsername -}}

  {{- if eq $personalUsername "adyranov" -}}
    {{- $personalName = "Artem Dyranov" -}}
    {{- $personalEmail = "artem.dyranov@gmail.com" -}}
    {{- if not $work -}}
      {{- $_ := set $gpg "sign" "0xAE12214C66692D96" -}}
      {{- $_ := set $gpg "encrypt" "0xE770F55D35040481" -}}
      {{- $_ := set $secrets "bitwarden" true -}}
    {{- end -}}
  {{- end -}}

  {{- $personalName = promptStringOnce $data.personal "name" "üìù Personal Git Name" $personalName -}}
  {{- $personalEmail = promptStringOnce $data.personal "email" "üìß Personal Git Email" $personalEmail -}}

  {{- $toolchainIcons := dict
      "cloud"       "‚òÅÔ∏è"
      "docker"      "üê≥"
      "golang"      "üêπ"
      "iac"         "üèóÔ∏è"
      "java"        "‚òï"
      "kubernetes"  "‚ò∏Ô∏è"
      "node"        "üü¢"
      "python"      "üêç"
      "rust"        "ü¶Ä"
      "extra"       "‚ú®"
  -}}

  {{- /* Build display names */ -}}
  {{- $toolchainsDisplay := list -}}
  {{- range $t := $toolchains -}}
    {{- $toolchainsDisplay = append $toolchainsDisplay (printf "%s %s" (get $toolchainIcons $t) $t) -}}
  {{- end -}}

  {{- $toolchainsSelected = promptMultichoiceOnce
      $data
      "toolchainsSelected"
      "‚öôÔ∏è Select toolchains to enable"
      $toolchainsDisplay
  -}}

  {{- range $t := $toolchains -}}
    {{- $_ := set $toolchainsEnabled $t false -}}
  {{- end -}}
  {{- range $s := $toolchainsSelected -}}
    {{- range $t := $toolchains -}}
      {{- if eq $s (printf "%s %s" (get $toolchainIcons $t) $t) -}}
        {{- $_ := set $toolchainsEnabled $t true -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}

  {{- if and (get $toolchainsEnabled "kubernetes") (not (get $toolchainsEnabled "docker")) -}}
    {{- $_ := set $toolchainsEnabled "docker" true -}}
    {{- writeToStdout "üê≥ Enabled Docker for Kubernetes.\n" -}}
  {{- end -}}

{{- writeToStdout "üí° Tip: You can re-enter your name and email with `chezmoi init --data=false`.\n" -}}
{{- else -}}
  {{- $interactive = false -}}
  {{- writeToStdout "ü§ñ Running in a non-interactive environment.\n" -}}
{{- end -}}

hooks:
  read-source-state:
    pre:
      command: /usr/bin/env
      args:
        - -S
        - bash
        - -euo
        - pipefail
        - {{ joinPath .chezmoi.sourceDir (printf ".chezmoiscripts/%s/.init.sh" $distro.id) | toToml }}

{{- if $secrets.age }}
encryption: age
age:
  command: "rage"
  identity: "{{ $.chezmoi.homeDir }}/.config/age/key.txt"
  recipient: "age16kxd4ljclq9ksnxvl2ee7a5xnj744kwyv04p04ka0n3rzxdpl5nsq52svl" # pragma: allowlist secret
{{- end }}
bitwarden:
  command: "rbw"
diff:
  pager: "delta"
status:
  exclude: ["always"]
data:
  brew:
    path: "{{ $brewPath }}"
  personal:
    email: "{{ $personalEmail }}"
    name: "{{ $personalName }}"
    username: {{ $personalUsername }}
  gpg:
    sign: "{{ $gpg.sign }}"
    encrypt: "{{ $gpg.encrypt }}"
  host:
    arch: "{{ .chezmoi.arch }}"
    distro:
      family: "{{ $distro.family }}"
      id: "{{ $distro.id }}"
    home: "{{ .chezmoi.homeDir }}"
    source: "{{ .chezmoi.sourceDir }}"
    type: "{{ $chassisType }}"
    work: {{ $work }}
    interactive: {{ $interactive }}
    restricted: {{ $restricted }}
  secrets:
    age: {{ $secrets.age }}
    bitwarden: {{ $secrets.bitwarden }}
    cache: "{{ joinPath .chezmoi.cacheDir "user" .chezmoi.username "secrets" }}"
  toolchains:
  {{- range $t, $enabled := $toolchainsEnabled }}
    {{ $t}}: {{ $enabled }}
  {{- end }}
  toolchainsSelected:
  {{- range $i, $t := $toolchainsSelected }}
    - "{{ $t }}"
  {{- end }}
